---
- name: create vpc full structure
  hosts: localhost
  become: yes
  gather_facts: yes
  remote_user: ubuntu

  tasks:
    - name: create a VPC
      ec2_vpc_net:
        name: Ansible_VPC
        cidr_block: 10.20.10.0/24
        region: us-east-1  # Specify your desired AWS region
        tags:
          Name: Ansible_VPC
      register: vpc_result

    - name: Set fact for VPC ID
      set_fact:
        vpc_id: "{{ vpc_result.vpc.id }}"
      register: vpcid

    - name: Display VPC id
      debug:
        var: vpc_result.vpc.id
    
    - name: save VPC id to a file
      copy:
        content: "{{ vpc_result.vpc.id }}"
        dest: /home/ansadmin/ansibleplaybook/output/vpc_id.txt


    - name: Create public Subnet 1
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_id }}"
        cidr: 10.20.10.0/25
        map_public : true
        az: us-east-1a
        region: us-east-1  # Specify the same AWS region
        tags:
          Name: public_subnet_1
      register: public_subnet_result

    - name: save public Subnet id to a file
      copy:
        content: "{{ public_subnet_result.subnet.id }}"
        dest: /home/ansadmin/ansibleplaybook/output/pub_sn_id.txt

    - name: Create Private subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        cidr: 10.20.10.128/25
        az: us-east-1b
        region: us-east-1  # Specify the same AWS region
        tags:
          Name: private_subnet_1
      register: private_subnet_result
    
    - name: save private Subnet id to a file
      copy:
        content: "{{ private_subnet_result.subnet.id }}"
        dest: /home/ansadmin/ansibleplaybook/output/priv_sn_id.txt

    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        state: present
        region: us-east-1  # Specify the same AWS region
        tags:
          Name: MyIGW
      register: igw_result

    - name: Display the IGW id
      debug:
        var: igw_result.gateway_id    
    
    - name: create Public Route Table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        tags:
          Name: Public_router
        subnets:
          - "{{ public_subnet_result.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
          - dest: ::/0
            gateway_id: "{{ igw_result.gateway_id }}"
    
    - name: creating Jump server SG
      amazon.aws.ec2_security_group:
        name: jump-server-sg
        description: Jump_server_sg
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        rules:
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
      register: ansible_sg_result

    - name: display security group
      debug:
        var: ansible_sg_result
    
    - name: creating nat security group
      amazon.aws.ec2_security_group:
        name: nat-server-sg
        description: Nat-server-sg
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        rules:
          - proto: all
            group_id: "{{ ansible_sg_result.group_id }}"
      register: nat_sg_result

    - name: screening nat sg
      debug:
        var: nat_sg_result.group_name

    - name: Private security Group creating
      amazon.aws.ec2_security_group:
        name: private_sg
        description: sg-private
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
              - 8080
            group_id: "{{ nat_sg_result.group_id }}"
      register: private_sg_result
    
    - name: ec2 creation = Jump_Server instance
      amazon.aws.ec2_instance:
        name: "Jump_Server"
        key_name: "AWS_FREE_PAIR"
        vpc_subnet_id: "{{ public_subnet_result.subnet.id }}"
        instance_type: t2.micro
        security_group: "{{ ansible_sg_result.group_id }}"
        volumes:    
          - device_name: /dev/sda1
            ebs:
              volume_size: 8
              volume_type: gp3
        network:
          assign_public_ip: true
        tags:
          Name: Jump_Server
          os: ubuntu
        image_id: ami-053b0d53c279acc90
      register: public_instance
    
    - name: ec2 creation = nat instance
      amazon.aws.ec2_instance:
        name: "nat_instance"
        key_name: "AWS_FREE_PAIR"
        vpc_subnet_id: "{{ public_subnet_result.subnet.id }}"
        instance_type: t2.micro
        security_group: "{{ nat_sg_result.group_id }}"
        state: running
        wait: yes
        network:
          assign_public_ip: true
        tags:
          Name: nat_instance
          os: nat
        image_id: ami-0356fe6f21ab7c13e
      register: nat_instance_result

    - name: ec2 creation = private instance
      amazon.aws.ec2_instance:
        name: "private_instance"
        key_name: "AWS_FREE_PAIR"
        vpc_subnet_id: "{{ private_subnet_result.subnet.id }}"
        instance_type: t2.micro
        security_group: "{{ private_sg_result.group_id }}"
        # state: present
        # wait: yes
        volumes:    
          - device_name: /dev/sda1
            ebs:
              volume_size: 8
              volume_type: gp3
        network:
          assign_public_ip: false
        tags:
          Name: private_instance
          os: ubuntu
        image_id: ami-053b0d53c279acc90
      register: private_instance_result
    
    - name: Display nat instance details
      debug:
        var: nat_instance_result.instance_ids[0]
    
    - name: Create the route table private
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        tags:
          Name: Private_router
        subnets:
          - "{{ private_subnet_result.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            instance_id: "{{ nat_instance_result.instance_ids[0] }}"
      register: private_routed

    - name: change the source the destinations in nat server
      amazon.aws.ec2_instance:
        instance_ids: "{{ nat_instance_result.instance_ids[0] }}"
        network:
          source_dest_check: false
      register: modify_ec2
    
    - name: Display the modify ec2
      debug:
        var: modify_ec2
      
    - name: Add the new EC2 instance to the hosts inventory
      add_host:
        hostname: "{{ item }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        groupname: private_ec2
      with_items: "{{ private_instance_result.instances[0].private_ip_address }}"

    # - name: Wait for SSH to become available on the new instance
    #   remote_user: ubuntu
    #   wait_for:
    #     host: "{{ item }}"
    #     port: 22
    #     state: started
    #   with_items: "{{ private_instance_result.instances[0].private_ip_address }}"

- name: Install Apache2
  hosts: private_ec2
  become: yes
  remote_user: ubuntu

  tasks:    
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Apache2
      apt:
        name: apache2
        state: present
    
    - name: change the port
      lineinfile:
        path: /etc/apache2/ports.conf
        regexp: '^Listen '
        line: 'Listen 8080'

    - name: Start Apache2 service
      service:
        name: apache2
        state: started
        enabled: yes
    
    - name: Start Apache2 service
      service:
        name: apache2
        state: restarted
        enabled: yes
